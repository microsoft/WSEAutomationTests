name: Check Device Online/Run CheckInTest on Multiple Runners/Upload Logs

on:
  push:
    branches:
      - user/jdugar/TestSelfHostAgent

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  
jobs:
  check-asus:
    name: Check ASUS-PROART
    runs-on: windows-latest
    outputs:
      online: ${{ steps.check.outputs.runner_online }}
    steps:
      - name: Check ASUS-PROART runner status
        id: check
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          $label = "Asus-ProArt"
          $repo = "${{ github.repository }}"
          write-output "repo details: $repo "
          $org = $repo.Split('/')[0]
          write-output "Org details: $org "
          $apiUrl = "https://api.github.com/orgs/$org/actions/runners"
          $response = gh api "$apiUrl" --paginate | ConvertFrom-Json
          $isOnline = $false
          foreach ($runner in $response.runners) {
            if ($runner.labels.name -contains $label -and $runner.status -eq "online") {
              $isOnline = $true
              break
            }
          }
          echo "runner_online=$isOnline" >> $env:GITHUB_OUTPUT

  check-hp:
    name: Check HP-REGIS-PV
    runs-on: windows-latest
    outputs:
      online: ${{ steps.check.outputs.runner_online }}
    steps:
      - name: Check HP-REGIS-PV runner status
        id: check
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          $label = "HP-REGIS-PV"
          $repo = "${{ github.repository }}"
          $org = $repo.Split('/')[0]
          $apiUrl = "https://api.github.com/orgs/$org/actions/runners"
          $response = gh api "$apiUrl" --paginate | ConvertFrom-Json
          $isOnline = $false
          foreach ($runner in $response.runners) {
            if ($runner.labels.name -contains $label -and $runner.status -eq "online") {
              $isOnline = $true
              break
            }
          }
          echo "runner_online=$isOnline" >> $env:GITHUB_OUTPUT

  check-surface:
    name: Check MICROSOFT-SURFA
    runs-on: windows-latest
    outputs:
      online: ${{ steps.check.outputs.runner_online }}
    steps:
      - name: Check MICROSOFT-SURFA runner status
        id: check
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          $label = "Surface-Pro"
          $repo = "${{ github.repository }}"
          $org = $repo.Split('/')[0]
          $apiUrl = "https://api.github.com/orgs/$org/actions/runners"
          $response = gh api "$apiUrl" --paginate | ConvertFrom-Json
          $isOnline = $false
          foreach ($runner in $response.runners) {
            if ($runner.labels.name -contains $label -and $runner.status -eq "online") {
              $isOnline = $true
              break
            }
          }
          echo "runner_online=$isOnline" >> $env:GITHUB_OUTPUT

  test:
    name: Run on ${{ matrix.name }}
    needs: [check-asus, check-hp, check-surface]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ASUS-PROART
            label: Asus-ProArt
            check_job: check-asus
          - name: MICROSOFT-SURFA
            label: Surface-Pro
            check_job: check-surface
          - name: HP-REGIS-PV
            label: HP-REGIS-PV
            check_job: check-hp
    runs-on: ${{ matrix.label }}

    steps:
    - name: Skip job if runner is offline
      shell: powershell
      run: |
        $online = "${{ needs[format('{0}', matrix.check_job)].outputs.online }}"
        Write-Output "Runner online status: $online"
        if ($online -ne 'true') {
        Write-Output "Runner is offline. Skipping job for ${{ matrix.name }}"
        exit 0
        }

    - name: Check out the repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pywinauto
      shell: powershell    

    - name: Run PowerShell Tests from E2E folder (device ${{ matrix.name }})
      shell: powershell
      continue-on-error: true
      working-directory: E2E
      run: |
        try {
            .\CheckInTest.ps1
          } catch {
            Write-Error "Test failed: $_"
            exit 1
          }

    - name: Find the latest log folder
      if: always()
      id: find-latest-log
      shell: powershell
      working-directory: E2E\logs
      run: |
        Write-Output "Changed directory to: $PWD"
        $logFolders = Get-ChildItem -Directory
        Write-Output "Log folders found: $($logFolders.Name)"
        $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        Write-Output "Latest log folder: $latestLogFolder"
        echo "LOG_FOLDER_NAME=$latestLogFolder" >> $env:GITHUB_ENV
        echo "LATEST_LOG_FOLDER=$($latestLogFolder.FullName)" >> $env:GITHUB_ENV

    - name: Verify latest log folder contents
      shell: powershell
      run: |
        Get-ChildItem -Path "${{ env.LATEST_LOG_FOLDER }}" -Recurse

    - name: Set artifact name
      id: set-artifact-name
      shell: powershell
      run: |
        $artifactName = "${{ env.LOG_FOLDER_NAME }}-${{ matrix.name }}"
        echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

    - name: Upload logs from device ${{ matrix.name }}
      if: ${{ always() && env.LATEST_LOG_FOLDER != '' }}
      uses: actions/upload-artifact@v4.6.2
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.LATEST_LOG_FOLDER }}\**
        if-no-files-found: warn
        retention-days: 7
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    - name: Test Complete on device ${{ matrix.name }}
      if: success()
      run: Write-Output "Test run completed successfully"

    - name: Test Failed on device ${{ matrix.name }}
      if: failure()
      run: Write-Output "Test run failed"
