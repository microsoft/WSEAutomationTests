name: Run Tests on Self-Hosted Runner.

on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      device_name:
        required: true
        type: string

jobs:
  run-tests:
    name: Run tests on ${{ inputs.device_name }}
    runs-on: ${{ inputs.runner_label }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pywinauto
        shell: powershell    
      
      - name: Run PowerShell Tests
        shell: powershell
        working-directory: E2E
        run: |
          $failed = $false
          $summaryLines = @()

          try {
              $raw = .\CheckInTest.ps1 *>&1 | Tee-Object -Variable output
             
              foreach ($line in $output) {
                  $lineStr = "$line".Trim()

                  # Match lines like: "1. Pluggedin\AF: Passed (111.2s)" or "13. Unplugged\AF: Skipped (0s)"
                  if ($lineStr -match '^\d+\.\s+(Pluggedin|Unplugged)\\[^\:]+:\s+(Passed|Failed|Skipped)\s+\([^)]+\)') {
                      Write-Host ""
                      Write-Host $lineStr
                      $summaryLines += $lineStr

                      # Mark failure
                      if ($lineStr -match ":\s*Failed\b") {
                          Write-Error "❌ Test failed: $lineStr"
                          $failed = $true
                      }
                  }
              }

              # Print just the clean summary list
              $summaryLines | ForEach-Object { Write-Host $_ }

          } catch {
              Write-Error "Test script threw an exception: $_"
              $failed = $true
          }

          if ($failed) { exit 1 }

      # - name: Run PowerShell Tests
      #   shell: powershell
      #   working-directory: E2E
      #   #continue-on-error: true
      #   run: |
      #     $failed = $false

      #     try {
      #         $output = .\CheckInTest.ps1 *>&1 | Tee-Object -Variable raw

      #         # Combine test output lines
      #         $buffer = @()
      #         foreach ($line in $raw) {
      #             $lineStr = "$line".Trim()
      #             if ($lineStr -match "^\d+\.\s") {
      #                 if ($buffer.Count -gt 0) { Write-Host ($buffer -join " "); $buffer.Clear() }
      #             }
      #             $buffer += $lineStr
      #         }
      #         if ($buffer.Count -gt 0) { Write-Host ($buffer -join " ") }

      #         if ($raw -match ":\s*Failed\b") {
      #             Write-Error "One or more tests failed."
      #             $failed = $true
      #         }

      #     } catch {
      #         Write-Error "Error: $($_.Exception.Message)"
      #         $failed = $true
      #     }

      #     if ($failed) { exit 1 }

      - name: Find the latest log folder
        if: always()
        id: find-latest-log
        shell: powershell
        working-directory: E2E\logs
        run: |
          Write-Output "Changed directory to: $PWD"
          $logFolders = Get-ChildItem -Directory
          Write-Output "Log folders found: $($logFolders.Name)"
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          echo "LOG_FOLDER_NAME=$latestLogFolder" >> $env:GITHUB_ENV
          echo "LATEST_LOG_FOLDER=$($latestLogFolder.FullName)" >> $env:GITHUB_ENV

      - name: Verify latest log folder contents
        if: always()
        shell: powershell
        run: |
          Get-ChildItem -Path "${{ env.LATEST_LOG_FOLDER }}" -Recurse

      - name: Set artifact name
        id: set-artifact-name
        if: always()
        shell: powershell
        run: |
          $artifactName = "${{ env.LOG_FOLDER_NAME }}-${{ inputs.device_name  }}"
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

      - name: Upload logs from device ${{ inputs.device_name  }}
        if: ${{ always() && env.LATEST_LOG_FOLDER != '' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.LATEST_LOG_FOLDER }}\**
          if-no-files-found: warn
          retention-days: 7
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Test Complete on device ${{ inputs.device_name  }}
        if: success()
        run: Write-Output "Test run completed successfully"

      - name: Test Failed on device ${{ inputs.device_name  }}
        if: failure()
        run: Write-Output "Test run failed"