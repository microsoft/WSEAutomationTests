name: Run Tests on Self-Hosted Runner if Online.

permissions:
   contents: read

on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string
      device_name:
        required: true
        type: string

jobs:
  run-tests:
    name: Run tests on ${{ inputs.device_name }}
    runs-on: ${{ inputs.runner_label }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download and install Python
        shell: powershell
        run: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12  

          $arch = (Get-CimInstance Win32_OperatingSystem).OSArchitecture
          if ($arch -ne "64-bit") {
              Write-Error "Only 64-bit systems are supported. Detected: $arch"
              exit 1
          }

          $page = Invoke-WebRequest -Uri "https://www.python.org/downloads/windows/"
          $links = $page.Links | Where-Object {
              $_.href -match "/ftp/python/\d+\.\d+\.\d+/python-\d+\.\d+\.\d+-amd64\.exe"
          }

          $latestLink = $links |
            ForEach-Object {
              if ($_.href -match "/ftp/python/(\d+\.\d+\.\d+)/python-\1-amd64\.exe") {
                [PSCustomObject]@{
                  Version = [Version]$Matches[1]
                  Href    = $_.href
                }
              }
            } |
            Sort-Object Version -Descending |
            Select-Object -First 1

          if (-not $latestLink) {
            Write-Error "Could not find a valid installer link."
            exit 1
          }

          # âœ… Fix: Build valid URL
          if ($latestLink.Href -notmatch '^https?://') {
            $downloadUrl = "https://www.python.org$($latestLink.Href)"
          } else {
            $downloadUrl = $latestLink.Href
          }

          $installerPath = "$env:TEMP\python-$($latestLink.Version)-installer.exe"
          Write-Host "Downloading from: $downloadUrl"

          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath -UseBasicParsing

          Start-Process -FilePath $installerPath -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1 Include_test=0" -Wait

      - name: Install dependencies
        working-directory: E2E\Library\python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: powershell    

      - name: Run PowerShell Tests
        shell: powershell
        working-directory: E2E
        run: |
          try {
              .\CheckInTest.ps1
            }
          catch {
              Write-Error "Test failed: $_"
              exit 1
            }

      - name: Find the latest log folder
        if: always()
        id: find-latest-log
        shell: powershell
        working-directory: E2E\logs
        run: |
          Write-Output "Changed directory to: $PWD"
          $logFolders = Get-ChildItem -Directory
          Write-Output "Log folders found: $($logFolders.Name)"
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          echo "LOG_FOLDER_NAME=$latestLogFolder" >> $env:GITHUB_ENV
          echo "LATEST_LOG_FOLDER=$($latestLogFolder.FullName)" >> $env:GITHUB_ENV

      - name: Verify latest log folder contents
        if: always()
        shell: powershell
        run: |
          Get-ChildItem -Path "${{ env.LATEST_LOG_FOLDER }}" -Recurse

      # - name: Test Results Summary
      #   if: always()
      #   shell: powershell
      #   working-directory: E2E\logs
      #   run: |
      #     $logFolders = Get-ChildItem -Directory
      #     $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
      #     Write-Output "Latest log folder: $latestLogFolder"
      #     $reportFile = Get-ChildItem -Path $latestLogFolder -Filter "Report.txt" -Recurse |
      #                   Sort-Object LastWriteTime -Descending | Select-Object -First 1   

      #     if ($reportFile) {
      #       Write-Host "Found report file at: $($reportFile.FullName)"
      #       $testResults = Get-Content $reportFile.FullName

      #       $passed = ($testResults | Select-String -Pattern "Status\s+:\s+Pass" | Measure-Object).Count
      #       $failed = ($testResults | Select-String -Pattern "Status\s+:\s+Fail" | Measure-Object).Count
      #       $skipped = ($testResults | Select-String -Pattern "Status\s+:\s+Skipped" | Measure-Object).Count
      #       $total = $passed + $failed + $skipped
      #       $maxLength = ($total, $passed, $failed, $skipped | ForEach-Object { $_.ToString().Length } | Measure-Object -Maximum).Maximum
      #       $x = $total.ToString().PadLeft($maxLength)
      #       $y = $passed.ToString().PadLeft($maxLength)
      #       $z = $failed.ToString().PadLeft($maxLength)
      #       $w = $skipped.ToString().PadLeft($maxLength)
      #       $padding = 22 - $maxLength

      #       # Print ASCII fallback summary table
      #       Write-Host "+-------------------+---------------------+"
      #       Write-Host "| TEST SUMMARY   |     COUNT              |"
      #       Write-Host "+-------------------+---------------------+"
      #       Write-Host "| Total Tests    | $x$($(' ' * $padding)) |"
      #       Write-Host "| Passed         | $y$($(' ' * $padding)) |"
      #       Write-Host "| Failed         | $z$($(' ' * $padding)) |"
      #       Write-Host "| Skipped        | $w$($(' ' * $padding)) |"
      #       Write-Host "+-------------------+---------------------+"

      #       if ($failed -gt 0) {
      #         Write-Warning "$failed tests failed! Check the detailed logs for more information."
      #         exit 1
      #       }
      #     } else {
      #       Write-Host "No Report.txt file found in $($latestLogFolder.FullName) or its subfolders."
      #       exit 1
      #     }    
      
      - name: Test Results Summary
        if: always()
        shell: powershell
        working-directory: E2E\logs
        run: |
          function CenterText($text, $width) {
            $text = $text.ToString()
            $padLeft = [Math]::Floor(($width - $text.Length) / 2)
            $padRight = $width - $text.Length - $padLeft
            return (' ' * $padLeft) + $text + (' ' * $padRight)
          }

          $logFolders = Get-ChildItem -Directory
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          $reportFile = Get-ChildItem -Path $latestLogFolder -Filter "Report.txt" -Recurse |
                        Sort-Object LastWriteTime -Descending | Select-Object -First 1   

          if ($reportFile) {
            Write-Host "Found report file at: $($reportFile.FullName)"
            $testResults = Get-Content $reportFile.FullName

            $passed = ($testResults | Select-String -Pattern "Status\s+:\s+Pass" | Measure-Object).Count
            $failed = ($testResults | Select-String -Pattern "Status\s+:\s+Fail" | Measure-Object).Count
            $skipped = ($testResults | Select-String -Pattern "Status\s+:\s+Skipped" | Measure-Object).Count
            $total = $passed + $failed + $skipped

            $columnWidth = 21

            $x = CenterText $total  $columnWidth
            $y = CenterText $passed $columnWidth
            $z = CenterText $failed $columnWidth
            $w = CenterText $skipped $columnWidth

            # Print ASCII fallback summary table
            Write-Host "+-------------------+---------------------+"
            Write-Host "| TEST SUMMARY      |        COUNT        |"
            Write-Host "+-------------------+---------------------+"
            Write-Host "| Total Tests       |$x|"
            Write-Host "| Passed            |$y|"
            Write-Host "| Failed            |$z|"
            Write-Host "| Skipped           |$w|"
            Write-Host "+-------------------+---------------------+"

            if ($failed -gt 0) {
              Write-Warning "$failed tests failed! Check the detailed logs for more information."
              exit 1
            }
          } else {
            Write-Host "No Report.txt file found in $($latestLogFolder.FullName) or its subfolders."
            exit 1
          }

      - name: Set artifact name
        id: set-artifact-name
        if: always()
        shell: powershell
        run: |
          $artifactName = "${{ env.LOG_FOLDER_NAME }}-${{ inputs.device_name  }}"
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

      - name: Upload logs from device ${{ inputs.device_name  }}
        if: ${{ always() && env.LATEST_LOG_FOLDER != '' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.LATEST_LOG_FOLDER }}\**
          if-no-files-found: warn
          retention-days: 7
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Test Complete on device ${{ inputs.device_name  }}
        if: success()
        run: Write-Output "Test run completed successfully"

      - name: Test Failed on device ${{ inputs.device_name  }}
        if: failure()
        run: Write-Output "Test run failed"