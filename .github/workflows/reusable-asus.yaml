name: ASUS-PROART Test Workflow

on:
  workflow_call:
    inputs:
      runner_label:
        required: true
        type: string

jobs:
  run-tests:
    name: Run tests on ${{ inputs.runner_label }}
    runs-on: ${{ inputs.runner_label }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pywinauto
        shell: powershell    

      - name: Run PowerShell Tests from E2E folder (device ${{ matrix.name }})
        shell: powershell
        continue-on-error: true
        working-directory: E2E
        run: |
         try {
             .\CheckInTest.ps1
         } catch {
           Write-Error "Test failed: $_"
           exit 1
         }

      - name: Find the latest log folder
        if: always()
        id: find-latest-log
        shell: powershell
        working-directory: E2E\logs
        run: |
          Write-Output "Changed directory to: $PWD"
          $logFolders = Get-ChildItem -Directory
          Write-Output "Log folders found: $($logFolders.Name)"
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          echo "LOG_FOLDER_NAME=$latestLogFolder" >> $env:GITHUB_ENV
          echo "LATEST_LOG_FOLDER=$($latestLogFolder.FullName)" >> $env:GITHUB_ENV

      - name: Test Results Summary
        if: always()
        shell: powershell
        working-directory: E2E\logs
        run: |
          $logFolders = Get-ChildItem -Directory
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          $reportFile = Get-ChildItem -Path $latestLogFolder -Filter "Report.txt" -Recurse |
                    Sort-Object LastWriteTime -Descending | Select-Object -First 1   
           if ($reportFile) {
              Write-Host "Found report file at: $($reportFile.FullName)"
              $testResults = Get-Content $reportFile.FullName

              $passed = ($testResults | Select-String -Pattern "Status\s+:\s+Pass" | Measure-Object).Count
              $failed = ($testResults | Select-String -Pattern "Status\s+:\s+Fail" | Measure-Object).Count
              $skipped = ($testResults | Select-String -Pattern "Status\s+:\s+Skipped" | Measure-Object).Count
              $total = $passed + $failed + $skipped
              $maxLength = ($total, $passed, $failed, $skipped | ForEach-Object { $_.ToString().Length } | Measure-Object -Maximum).Maximum
              $x = $total.ToString().PadLeft($maxLength)
              $y = $passed.ToString().PadLeft($maxLength)
              $z = $failed.ToString().PadLeft($maxLength)
              $w = $skipped.ToString().PadLeft($maxLength)
              $padding = 22 - $maxLength

              # Print summary table
              Write-Host "┌───────────────────────────────────────┐"
              Write-Host "│           TEST EXECUTION SUMMARY      │"
              Write-Host "├───────────────┬───────────────────────┤"
              Write-Host "│ Total Tests   │ $x$($(' ' * $padding))│"
              Write-Host "│ Passed        │ $y$($(' ' * $padding))│"
              Write-Host "│ Failed        │ $z$($(' ' * $padding))│"
              Write-Host "│ Skipped       │ $w$($(' ' * $padding))│"
              Write-Host "└───────────────┴───────────────────────┘"

              if ($failed -gt 0) {
                Write-Warning "$failed tests failed! Check the detailed logs for more information."
                exit 1
              }
            } else {
              Write-Host "No Report.txt file found in $logsFolder or its subfolders."
              exit 1
            }
          

      - name: Verify latest log folder contents
        shell: powershell
        run: |
          Get-ChildItem -Path "${{ env.LATEST_LOG_FOLDER }}" -Recurse

      - name: Set artifact name
        id: set-artifact-name
        shell: powershell
        run: |
          $artifactName = "${{ env.LOG_FOLDER_NAME }}-${{ matrix.name }}"
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

      - name: Upload logs from device ${{ matrix.name }}
        if: ${{ always() && env.LATEST_LOG_FOLDER != '' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.LATEST_LOG_FOLDER }}\**
          if-no-files-found: warn
          retention-days: 7
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Test Complete on device ${{ matrix.name }}
        if: success()
        run: Write-Output "Test run completed successfully"

      - name: Test Failed on device ${{ matrix.name }}
        if: failure()
        run: Write-Output "Test run failed"
