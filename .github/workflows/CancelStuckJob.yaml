name: Run CheckInTest on Multiple Runners and Upload Logs

on:
  push:
    branches:
      - user/jdugar/TestSelfHostAgent

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  test:
    name: Run on ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ASUS-PROART
            label: Asus-ProArt
          - name: MICROSOFT-SURFA
            label: Surface-Pro
          - name: HP-REGIS-PV
            label: HP-REGIS-PV
    runs-on: ${{ matrix.label }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

    controller:
      name: Cancel Stuck Jobs After 10min
      runs-on: ubuntu-latest
      continue-on-error: true  # In case there's a transient failure
      steps:
      - name: Delay before checking status
        run: sleep 600

      - name: Cancel stuck jobs
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          run_id=$(gh run list --limit 1 --json databaseId --jq '.[0].databaseId')
          echo "Run ID: $run_id"

          jobs=$(gh api repos/${{ github.repository }}/actions/runs/$run_id/jobs --jq '.jobs[] | {name: .name, status: .status, id: .id}')
          echo "$jobs"

          for job in $(echo "$jobs" | jq -c '.'); do
            name=$(echo "$job" | jq -r '.name')
            status=$(echo "$job" | jq -r '.status')
            id=$(echo "$job" | jq -r '.id')

            if [[ "$name" == *"Run on"* && "$status" == "queued" ]]; then
              echo "Cancelling stuck job: $name"
              gh api -X POST repos/${{ github.repository }}/actions/jobs/$id/cancel
            fi
          done      

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pywinauto
        shell: powershell

      - name: Run PowerShell Tests from E2E folder (device ${{ matrix.name }})
        shell: powershell
        continue-on-error: true
        working-directory: E2E
        run: |
          try {
              .\CheckInTest.ps1
            } catch {
              Write-Error "Test failed: $_"
              exit 1
            }

      - name: Find the latest log folder
        if: always()
        id: find-latest-log
        shell: powershell
        working-directory: E2E\logs
        run: |
          Write-Output "Changed directory to: $PWD"
          $logFolders = Get-ChildItem -Directory
          Write-Output "Log folders found: $($logFolders.Name)"
          $latestLogFolder = $logFolders | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          Write-Output "Latest log folder: $latestLogFolder"
          echo "LOG_FOLDER_NAME=$latestLogFolder" >> $env:GITHUB_ENV
          echo "LATEST_LOG_FOLDER=$($latestLogFolder.FullName)" >> $env:GITHUB_ENV

      - name: Verify latest log folder contents
        shell: powershell
        run: |
          Get-ChildItem -Path "${{ env.LATEST_LOG_FOLDER }}" -Recurse

      - name: Set artifact name
        id: set-artifact-name
        shell: powershell
        run: |
          $artifactName = "${{ env.LOG_FOLDER_NAME }}-${{ matrix.name}}"
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV

      - name: Upload logs from device ${{ matrix.name }}
        if: ${{ always() && env.LATEST_LOG_FOLDER != '' }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.LATEST_LOG_FOLDER }}\**
          if-no-files-found: warn
          retention-days: 7
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Test Complete on device ${{ matrix.name }}
        if: success()
        run: |
          Write-Output "Test run completed successfully"

      - name: Test Failed on device ${{ matrix.name }}
        if: failure()
        run: |
          Write-Output "Test run failed"
